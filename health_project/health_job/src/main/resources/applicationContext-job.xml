<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://code.alibabatech.com/schema/dubbo
						http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd">
    <!--注册服务名称-->
    <dubbo:application name="health_job"></dubbo:application>
    <!--订阅服务-->
    <dubbo:registry address="zookeeper://localhost:2181"></dubbo:registry>
    <!--扫描服务-->
    <dubbo:annotation package="com.hua.job"></dubbo:annotation>
    <dubbo:consumer  timeout="600000" check="false"></dubbo:consumer>

    <!--引入其他配置文件-->
    <import resource="applicationContext-redis.xml"></import>

    <!-- 注册自定义Job -->
    <bean id="jobDemo" class="com.hua.job.ClearImgJob">
        <property name="jedisPool" ref="jedisPool"></property>
    </bean>

    <!-- 注册JobDetail,作用是负责通过反射调用指定的Job -->
    <bean id="jobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!-- 注入目标对象 -->
        <property name="targetObject" ref="jobDemo"/>
        <!-- 注入目标方法 -->
        <property name="targetMethod" value="clear"/>
    </bean>

    <!-- 注册一个触发器，指定任务触发的时间 -->
    <bean id="myTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <!-- 注入JobDetail -->
        <property name="jobDetail" ref="jobDetail"/>
        <!-- 指定触发的时间，基于Cron表达式 -->
        <property name="cronExpression">
            <value>0/10 * * * * ?</value>
            <!--<value>1-50 * * * * ?</value>-->
        </property>
    </bean>

    <!--实例化定时清除预约设置类-->
    <bean id="jobOrder" class="com.hua.job.ClearOrderJob"></bean>

    <!--注册jobOrderDetail，反射调用JobOrder(预约设置)-->
    <bean id="jobOrderDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <!--注入目标对象-->
        <property name="targetObject" ref="jobOrder"></property>
        <!--注入目标方法-->
        <property name="targetMethod" value="orderClear"></property>
    </bean>

    <!--注册触发器,定时清除预约设置历史数据-->
    <bean id="orderTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <!--注入jobOrderDetail-->
        <property name="jobDetail" ref="jobOrderDetail"></property>
        <!--指定触发时间-->
        <property name="cronExpression">
            <!--每分钟执行一次-->
            <value>0 * * * * ? *</value>
            <!--每天的凌晨2点执行-->
          <!--  <value>0 0 2 1/1 * ? </value>-->
        </property>
    </bean>

    <!-- 注册一个统一的调度工厂，通过这个调度工厂调度任务 -->
    <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!-- 注入多个触发器 -->
        <property name="triggers">
            <list>
                <ref bean="myTrigger"/>
                <ref bean="orderTrigger"></ref>
            </list>
        </property>
    </bean>


</beans>